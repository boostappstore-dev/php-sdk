<?php
/**
 * CampaignCreateInfo
 *
 * PHP version 5
 *
 * @category Class
 * @package  Boostapp
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Boost App Store API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.0
 * Contact: info@boostapp.store
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.13
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Boostapp\Model;

use \ArrayAccess;
use \Boostapp\ObjectSerializer;

/**
 * CampaignCreateInfo Class Doc Comment
 *
 * @category Class
 * @package  Boostapp
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class CampaignCreateInfo implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'CampaignCreateInfo';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'campaign_id' => 'int',
        'old_balance' => 'double',
        'current_balance' => 'double',
        'total_spend' => 'double',
        'package_install_price' => 'double',
        'keyword_install_price' => 'double',
        'review_price' => 'double',
        'package_install_count' => 'int',
        'keyword_install_count' => 'int',
        'review_count' => 'int',
        'package_install_amount' => 'double',
        'keyword_install_amount' => 'double',
        'review_amount' => 'double'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'campaign_id' => 'int64',
        'old_balance' => 'double',
        'current_balance' => 'double',
        'total_spend' => 'double',
        'package_install_price' => 'double',
        'keyword_install_price' => 'double',
        'review_price' => 'double',
        'package_install_count' => 'int32',
        'keyword_install_count' => 'int32',
        'review_count' => 'int32',
        'package_install_amount' => 'double',
        'keyword_install_amount' => 'double',
        'review_amount' => 'double'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'campaign_id' => 'campaignId',
        'old_balance' => 'oldBalance',
        'current_balance' => 'currentBalance',
        'total_spend' => 'totalSpend',
        'package_install_price' => 'packageInstallPrice',
        'keyword_install_price' => 'keywordInstallPrice',
        'review_price' => 'reviewPrice',
        'package_install_count' => 'packageInstallCount',
        'keyword_install_count' => 'keywordInstallCount',
        'review_count' => 'reviewCount',
        'package_install_amount' => 'packageInstallAmount',
        'keyword_install_amount' => 'keywordInstallAmount',
        'review_amount' => 'reviewAmount'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'campaign_id' => 'setCampaignId',
        'old_balance' => 'setOldBalance',
        'current_balance' => 'setCurrentBalance',
        'total_spend' => 'setTotalSpend',
        'package_install_price' => 'setPackageInstallPrice',
        'keyword_install_price' => 'setKeywordInstallPrice',
        'review_price' => 'setReviewPrice',
        'package_install_count' => 'setPackageInstallCount',
        'keyword_install_count' => 'setKeywordInstallCount',
        'review_count' => 'setReviewCount',
        'package_install_amount' => 'setPackageInstallAmount',
        'keyword_install_amount' => 'setKeywordInstallAmount',
        'review_amount' => 'setReviewAmount'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'campaign_id' => 'getCampaignId',
        'old_balance' => 'getOldBalance',
        'current_balance' => 'getCurrentBalance',
        'total_spend' => 'getTotalSpend',
        'package_install_price' => 'getPackageInstallPrice',
        'keyword_install_price' => 'getKeywordInstallPrice',
        'review_price' => 'getReviewPrice',
        'package_install_count' => 'getPackageInstallCount',
        'keyword_install_count' => 'getKeywordInstallCount',
        'review_count' => 'getReviewCount',
        'package_install_amount' => 'getPackageInstallAmount',
        'keyword_install_amount' => 'getKeywordInstallAmount',
        'review_amount' => 'getReviewAmount'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['campaign_id'] = isset($data['campaign_id']) ? $data['campaign_id'] : null;
        $this->container['old_balance'] = isset($data['old_balance']) ? $data['old_balance'] : null;
        $this->container['current_balance'] = isset($data['current_balance']) ? $data['current_balance'] : null;
        $this->container['total_spend'] = isset($data['total_spend']) ? $data['total_spend'] : null;
        $this->container['package_install_price'] = isset($data['package_install_price']) ? $data['package_install_price'] : null;
        $this->container['keyword_install_price'] = isset($data['keyword_install_price']) ? $data['keyword_install_price'] : null;
        $this->container['review_price'] = isset($data['review_price']) ? $data['review_price'] : null;
        $this->container['package_install_count'] = isset($data['package_install_count']) ? $data['package_install_count'] : null;
        $this->container['keyword_install_count'] = isset($data['keyword_install_count']) ? $data['keyword_install_count'] : null;
        $this->container['review_count'] = isset($data['review_count']) ? $data['review_count'] : null;
        $this->container['package_install_amount'] = isset($data['package_install_amount']) ? $data['package_install_amount'] : null;
        $this->container['keyword_install_amount'] = isset($data['keyword_install_amount']) ? $data['keyword_install_amount'] : null;
        $this->container['review_amount'] = isset($data['review_amount']) ? $data['review_amount'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets campaign_id
     *
     * @return int
     */
    public function getCampaignId()
    {
        return $this->container['campaign_id'];
    }

    /**
     * Sets campaign_id
     *
     * @param int $campaign_id Created campaign identity
     *
     * @return $this
     */
    public function setCampaignId($campaign_id)
    {
        $this->container['campaign_id'] = $campaign_id;

        return $this;
    }

    /**
     * Gets old_balance
     *
     * @return double
     */
    public function getOldBalance()
    {
        return $this->container['old_balance'];
    }

    /**
     * Sets old_balance
     *
     * @param double $old_balance Your old balance
     *
     * @return $this
     */
    public function setOldBalance($old_balance)
    {
        $this->container['old_balance'] = $old_balance;

        return $this;
    }

    /**
     * Gets current_balance
     *
     * @return double
     */
    public function getCurrentBalance()
    {
        return $this->container['current_balance'];
    }

    /**
     * Sets current_balance
     *
     * @param double $current_balance Your new balance
     *
     * @return $this
     */
    public function setCurrentBalance($current_balance)
    {
        $this->container['current_balance'] = $current_balance;

        return $this;
    }

    /**
     * Gets total_spend
     *
     * @return double
     */
    public function getTotalSpend()
    {
        return $this->container['total_spend'];
    }

    /**
     * Sets total_spend
     *
     * @param double $total_spend Total spending amount
     *
     * @return $this
     */
    public function setTotalSpend($total_spend)
    {
        $this->container['total_spend'] = $total_spend;

        return $this;
    }

    /**
     * Gets package_install_price
     *
     * @return double
     */
    public function getPackageInstallPrice()
    {
        return $this->container['package_install_price'];
    }

    /**
     * Sets package_install_price
     *
     * @param double $package_install_price The price that you pay per download with the package name
     *
     * @return $this
     */
    public function setPackageInstallPrice($package_install_price)
    {
        $this->container['package_install_price'] = $package_install_price;

        return $this;
    }

    /**
     * Gets keyword_install_price
     *
     * @return double
     */
    public function getKeywordInstallPrice()
    {
        return $this->container['keyword_install_price'];
    }

    /**
     * Sets keyword_install_price
     *
     * @param double $keyword_install_price The price that you pay per download with keyword
     *
     * @return $this
     */
    public function setKeywordInstallPrice($keyword_install_price)
    {
        $this->container['keyword_install_price'] = $keyword_install_price;

        return $this;
    }

    /**
     * Gets review_price
     *
     * @return double
     */
    public function getReviewPrice()
    {
        return $this->container['review_price'];
    }

    /**
     * Sets review_price
     *
     * @param double $review_price The price that you pay per review
     *
     * @return $this
     */
    public function setReviewPrice($review_price)
    {
        $this->container['review_price'] = $review_price;

        return $this;
    }

    /**
     * Gets package_install_count
     *
     * @return int
     */
    public function getPackageInstallCount()
    {
        return $this->container['package_install_count'];
    }

    /**
     * Sets package_install_count
     *
     * @param int $package_install_count Total amount of downloads with package name that you purchased
     *
     * @return $this
     */
    public function setPackageInstallCount($package_install_count)
    {
        $this->container['package_install_count'] = $package_install_count;

        return $this;
    }

    /**
     * Gets keyword_install_count
     *
     * @return int
     */
    public function getKeywordInstallCount()
    {
        return $this->container['keyword_install_count'];
    }

    /**
     * Sets keyword_install_count
     *
     * @param int $keyword_install_count Total amount of keywords and downloads that you purchased
     *
     * @return $this
     */
    public function setKeywordInstallCount($keyword_install_count)
    {
        $this->container['keyword_install_count'] = $keyword_install_count;

        return $this;
    }

    /**
     * Gets review_count
     *
     * @return int
     */
    public function getReviewCount()
    {
        return $this->container['review_count'];
    }

    /**
     * Sets review_count
     *
     * @param int $review_count Total amount of reviews that you purchased
     *
     * @return $this
     */
    public function setReviewCount($review_count)
    {
        $this->container['review_count'] = $review_count;

        return $this;
    }

    /**
     * Gets package_install_amount
     *
     * @return double
     */
    public function getPackageInstallAmount()
    {
        return $this->container['package_install_amount'];
    }

    /**
     * Sets package_install_amount
     *
     * @param double $package_install_amount Total price that you paid for download with package name
     *
     * @return $this
     */
    public function setPackageInstallAmount($package_install_amount)
    {
        $this->container['package_install_amount'] = $package_install_amount;

        return $this;
    }

    /**
     * Gets keyword_install_amount
     *
     * @return double
     */
    public function getKeywordInstallAmount()
    {
        return $this->container['keyword_install_amount'];
    }

    /**
     * Sets keyword_install_amount
     *
     * @param double $keyword_install_amount Total price that you paid for downloading with keyword
     *
     * @return $this
     */
    public function setKeywordInstallAmount($keyword_install_amount)
    {
        $this->container['keyword_install_amount'] = $keyword_install_amount;

        return $this;
    }

    /**
     * Gets review_amount
     *
     * @return double
     */
    public function getReviewAmount()
    {
        return $this->container['review_amount'];
    }

    /**
     * Sets review_amount
     *
     * @param double $review_amount Total price that you paid for reviews
     *
     * @return $this
     */
    public function setReviewAmount($review_amount)
    {
        $this->container['review_amount'] = $review_amount;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}



<?php
/**
 * ApplicationRatings
 *
 * PHP version 5
 *
 * @category Class
 * @package  Boostapp
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Boost App Store API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.0
 * Contact: info@boostapp.store
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.13
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Boostapp\Model;

use \ArrayAccess;
use \Boostapp\ObjectSerializer;

/**
 * ApplicationRatings Class Doc Comment
 *
 * @category Class
 * @description Star distributions of reviews
 * @package  Boostapp
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class ApplicationRatings implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'ApplicationRatings';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'five' => 'int',
        'four' => 'int',
        'three' => 'int',
        'two' => 'int',
        'one' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'five' => 'integer',
        'four' => 'integer',
        'three' => 'integer',
        'two' => 'integer',
        'one' => 'integer'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'five' => 'five',
        'four' => 'four',
        'three' => 'three',
        'two' => 'two',
        'one' => 'one'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'five' => 'setFive',
        'four' => 'setFour',
        'three' => 'setThree',
        'two' => 'setTwo',
        'one' => 'setOne'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'five' => 'getFive',
        'four' => 'getFour',
        'three' => 'getThree',
        'two' => 'getTwo',
        'one' => 'getOne'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['five'] = isset($data['five']) ? $data['five'] : null;
        $this->container['four'] = isset($data['four']) ? $data['four'] : null;
        $this->container['three'] = isset($data['three']) ? $data['three'] : null;
        $this->container['two'] = isset($data['two']) ? $data['two'] : null;
        $this->container['one'] = isset($data['one']) ? $data['one'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets five
     *
     * @return int
     */
    public function getFive()
    {
        return $this->container['five'];
    }

    /**
     * Sets five
     *
     * @param int $five five
     *
     * @return $this
     */
    public function setFive($five)
    {
        $this->container['five'] = $five;

        return $this;
    }

    /**
     * Gets four
     *
     * @return int
     */
    public function getFour()
    {
        return $this->container['four'];
    }

    /**
     * Sets four
     *
     * @param int $four four
     *
     * @return $this
     */
    public function setFour($four)
    {
        $this->container['four'] = $four;

        return $this;
    }

    /**
     * Gets three
     *
     * @return int
     */
    public function getThree()
    {
        return $this->container['three'];
    }

    /**
     * Sets three
     *
     * @param int $three three
     *
     * @return $this
     */
    public function setThree($three)
    {
        $this->container['three'] = $three;

        return $this;
    }

    /**
     * Gets two
     *
     * @return int
     */
    public function getTwo()
    {
        return $this->container['two'];
    }

    /**
     * Sets two
     *
     * @param int $two two
     *
     * @return $this
     */
    public function setTwo($two)
    {
        $this->container['two'] = $two;

        return $this;
    }

    /**
     * Gets one
     *
     * @return int
     */
    public function getOne()
    {
        return $this->container['one'];
    }

    /**
     * Sets one
     *
     * @param int $one one
     *
     * @return $this
     */
    public function setOne($one)
    {
        $this->container['one'] = $one;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}



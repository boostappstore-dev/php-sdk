<?php
/**
 * PurchaseLog
 *
 * PHP version 5
 *
 * @category Class
 * @package  Boostapp
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Boost App Store API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.0
 * Contact: info@boostapp.store
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.13
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Boostapp\Model;

use \ArrayAccess;
use \Boostapp\ObjectSerializer;

/**
 * PurchaseLog Class Doc Comment
 *
 * @category Class
 * @package  Boostapp
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class PurchaseLog implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'PurchaseLog';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'id' => 'int',
        'customer_identifier' => 'string',
        'package_name' => 'string',
        'campaign_id' => 'int',
        'country_id' => '\Boostapp\Model\Country',
        'log_type' => '\Boostapp\Model\PurchaseLogType',
        'package_installs' => 'int',
        'keyword_installs' => 'int',
        'reviews' => 'int',
        'package_install_price' => 'double',
        'keyword_install_price' => 'double',
        'review_price' => 'double',
        'total_package_install_price' => 'double',
        'total_keyword_install_price' => 'double',
        'total_review_price' => 'double',
        'old_balance' => 'double',
        'new_balance' => 'double',
        'created' => '\DateTime'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'id' => 'int64',
        'customer_identifier' => null,
        'package_name' => null,
        'campaign_id' => 'int64',
        'country_id' => null,
        'log_type' => null,
        'package_installs' => 'int64',
        'keyword_installs' => 'int64',
        'reviews' => 'int64',
        'package_install_price' => 'double',
        'keyword_install_price' => 'double',
        'review_price' => 'double',
        'total_package_install_price' => 'double',
        'total_keyword_install_price' => 'double',
        'total_review_price' => 'double',
        'old_balance' => 'double',
        'new_balance' => 'double',
        'created' => 'date-time'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'customer_identifier' => 'customerIdentifier',
        'package_name' => 'packageName',
        'campaign_id' => 'campaignId',
        'country_id' => 'countryId',
        'log_type' => 'logType',
        'package_installs' => 'packageInstalls',
        'keyword_installs' => 'keywordInstalls',
        'reviews' => 'reviews',
        'package_install_price' => 'packageInstallPrice',
        'keyword_install_price' => 'keywordInstallPrice',
        'review_price' => 'reviewPrice',
        'total_package_install_price' => 'totalPackageInstallPrice',
        'total_keyword_install_price' => 'totalKeywordInstallPrice',
        'total_review_price' => 'totalReviewPrice',
        'old_balance' => 'oldBalance',
        'new_balance' => 'newBalance',
        'created' => 'created'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'customer_identifier' => 'setCustomerIdentifier',
        'package_name' => 'setPackageName',
        'campaign_id' => 'setCampaignId',
        'country_id' => 'setCountryId',
        'log_type' => 'setLogType',
        'package_installs' => 'setPackageInstalls',
        'keyword_installs' => 'setKeywordInstalls',
        'reviews' => 'setReviews',
        'package_install_price' => 'setPackageInstallPrice',
        'keyword_install_price' => 'setKeywordInstallPrice',
        'review_price' => 'setReviewPrice',
        'total_package_install_price' => 'setTotalPackageInstallPrice',
        'total_keyword_install_price' => 'setTotalKeywordInstallPrice',
        'total_review_price' => 'setTotalReviewPrice',
        'old_balance' => 'setOldBalance',
        'new_balance' => 'setNewBalance',
        'created' => 'setCreated'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'customer_identifier' => 'getCustomerIdentifier',
        'package_name' => 'getPackageName',
        'campaign_id' => 'getCampaignId',
        'country_id' => 'getCountryId',
        'log_type' => 'getLogType',
        'package_installs' => 'getPackageInstalls',
        'keyword_installs' => 'getKeywordInstalls',
        'reviews' => 'getReviews',
        'package_install_price' => 'getPackageInstallPrice',
        'keyword_install_price' => 'getKeywordInstallPrice',
        'review_price' => 'getReviewPrice',
        'total_package_install_price' => 'getTotalPackageInstallPrice',
        'total_keyword_install_price' => 'getTotalKeywordInstallPrice',
        'total_review_price' => 'getTotalReviewPrice',
        'old_balance' => 'getOldBalance',
        'new_balance' => 'getNewBalance',
        'created' => 'getCreated'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['customer_identifier'] = isset($data['customer_identifier']) ? $data['customer_identifier'] : null;
        $this->container['package_name'] = isset($data['package_name']) ? $data['package_name'] : null;
        $this->container['campaign_id'] = isset($data['campaign_id']) ? $data['campaign_id'] : null;
        $this->container['country_id'] = isset($data['country_id']) ? $data['country_id'] : null;
        $this->container['log_type'] = isset($data['log_type']) ? $data['log_type'] : null;
        $this->container['package_installs'] = isset($data['package_installs']) ? $data['package_installs'] : null;
        $this->container['keyword_installs'] = isset($data['keyword_installs']) ? $data['keyword_installs'] : null;
        $this->container['reviews'] = isset($data['reviews']) ? $data['reviews'] : null;
        $this->container['package_install_price'] = isset($data['package_install_price']) ? $data['package_install_price'] : null;
        $this->container['keyword_install_price'] = isset($data['keyword_install_price']) ? $data['keyword_install_price'] : null;
        $this->container['review_price'] = isset($data['review_price']) ? $data['review_price'] : null;
        $this->container['total_package_install_price'] = isset($data['total_package_install_price']) ? $data['total_package_install_price'] : null;
        $this->container['total_keyword_install_price'] = isset($data['total_keyword_install_price']) ? $data['total_keyword_install_price'] : null;
        $this->container['total_review_price'] = isset($data['total_review_price']) ? $data['total_review_price'] : null;
        $this->container['old_balance'] = isset($data['old_balance']) ? $data['old_balance'] : null;
        $this->container['new_balance'] = isset($data['new_balance']) ? $data['new_balance'] : null;
        $this->container['created'] = isset($data['created']) ? $data['created'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int $id Purchasing record ID
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets customer_identifier
     *
     * @return string
     */
    public function getCustomerIdentifier()
    {
        return $this->container['customer_identifier'];
    }

    /**
     * Sets customer_identifier
     *
     * @param string $customer_identifier Customer identity, it returns empty for purchases from reseller account
     *
     * @return $this
     */
    public function setCustomerIdentifier($customer_identifier)
    {
        $this->container['customer_identifier'] = $customer_identifier;

        return $this;
    }

    /**
     * Gets package_name
     *
     * @return string
     */
    public function getPackageName()
    {
        return $this->container['package_name'];
    }

    /**
     * Sets package_name
     *
     * @param string $package_name Application package name
     *
     * @return $this
     */
    public function setPackageName($package_name)
    {
        $this->container['package_name'] = $package_name;

        return $this;
    }

    /**
     * Gets campaign_id
     *
     * @return int
     */
    public function getCampaignId()
    {
        return $this->container['campaign_id'];
    }

    /**
     * Sets campaign_id
     *
     * @param int $campaign_id Campaign identity
     *
     * @return $this
     */
    public function setCampaignId($campaign_id)
    {
        $this->container['campaign_id'] = $campaign_id;

        return $this;
    }

    /**
     * Gets country_id
     *
     * @return \Boostapp\Model\Country
     */
    public function getCountryId()
    {
        return $this->container['country_id'];
    }

    /**
     * Sets country_id
     *
     * @param \Boostapp\Model\Country $country_id country_id
     *
     * @return $this
     */
    public function setCountryId($country_id)
    {
        $this->container['country_id'] = $country_id;

        return $this;
    }

    /**
     * Gets log_type
     *
     * @return \Boostapp\Model\PurchaseLogType
     */
    public function getLogType()
    {
        return $this->container['log_type'];
    }

    /**
     * Sets log_type
     *
     * @param \Boostapp\Model\PurchaseLogType $log_type log_type
     *
     * @return $this
     */
    public function setLogType($log_type)
    {
        $this->container['log_type'] = $log_type;

        return $this;
    }

    /**
     * Gets package_installs
     *
     * @return int
     */
    public function getPackageInstalls()
    {
        return $this->container['package_installs'];
    }

    /**
     * Sets package_installs
     *
     * @param int $package_installs The number of install with package name
     *
     * @return $this
     */
    public function setPackageInstalls($package_installs)
    {
        $this->container['package_installs'] = $package_installs;

        return $this;
    }

    /**
     * Gets keyword_installs
     *
     * @return int
     */
    public function getKeywordInstalls()
    {
        return $this->container['keyword_installs'];
    }

    /**
     * Sets keyword_installs
     *
     * @param int $keyword_installs The number of install with keyword
     *
     * @return $this
     */
    public function setKeywordInstalls($keyword_installs)
    {
        $this->container['keyword_installs'] = $keyword_installs;

        return $this;
    }

    /**
     * Gets reviews
     *
     * @return int
     */
    public function getReviews()
    {
        return $this->container['reviews'];
    }

    /**
     * Sets reviews
     *
     * @param int $reviews The number of reviews
     *
     * @return $this
     */
    public function setReviews($reviews)
    {
        $this->container['reviews'] = $reviews;

        return $this;
    }

    /**
     * Gets package_install_price
     *
     * @return double
     */
    public function getPackageInstallPrice()
    {
        return $this->container['package_install_price'];
    }

    /**
     * Sets package_install_price
     *
     * @param double $package_install_price Price for per install with package name (USD)
     *
     * @return $this
     */
    public function setPackageInstallPrice($package_install_price)
    {
        $this->container['package_install_price'] = $package_install_price;

        return $this;
    }

    /**
     * Gets keyword_install_price
     *
     * @return double
     */
    public function getKeywordInstallPrice()
    {
        return $this->container['keyword_install_price'];
    }

    /**
     * Sets keyword_install_price
     *
     * @param double $keyword_install_price Price for per install with keyword (USD)
     *
     * @return $this
     */
    public function setKeywordInstallPrice($keyword_install_price)
    {
        $this->container['keyword_install_price'] = $keyword_install_price;

        return $this;
    }

    /**
     * Gets review_price
     *
     * @return double
     */
    public function getReviewPrice()
    {
        return $this->container['review_price'];
    }

    /**
     * Sets review_price
     *
     * @param double $review_price Price for per review (USD)
     *
     * @return $this
     */
    public function setReviewPrice($review_price)
    {
        $this->container['review_price'] = $review_price;

        return $this;
    }

    /**
     * Gets total_package_install_price
     *
     * @return double
     */
    public function getTotalPackageInstallPrice()
    {
        return $this->container['total_package_install_price'];
    }

    /**
     * Sets total_package_install_price
     *
     * @param double $total_package_install_price Spent/Refunded amount of install with package name (USD)
     *
     * @return $this
     */
    public function setTotalPackageInstallPrice($total_package_install_price)
    {
        $this->container['total_package_install_price'] = $total_package_install_price;

        return $this;
    }

    /**
     * Gets total_keyword_install_price
     *
     * @return double
     */
    public function getTotalKeywordInstallPrice()
    {
        return $this->container['total_keyword_install_price'];
    }

    /**
     * Sets total_keyword_install_price
     *
     * @param double $total_keyword_install_price Spent/Refunded amount of install with keyword (USD)
     *
     * @return $this
     */
    public function setTotalKeywordInstallPrice($total_keyword_install_price)
    {
        $this->container['total_keyword_install_price'] = $total_keyword_install_price;

        return $this;
    }

    /**
     * Gets total_review_price
     *
     * @return double
     */
    public function getTotalReviewPrice()
    {
        return $this->container['total_review_price'];
    }

    /**
     * Sets total_review_price
     *
     * @param double $total_review_price Spent/Refunded amount of reviews (USD)
     *
     * @return $this
     */
    public function setTotalReviewPrice($total_review_price)
    {
        $this->container['total_review_price'] = $total_review_price;

        return $this;
    }

    /**
     * Gets old_balance
     *
     * @return double
     */
    public function getOldBalance()
    {
        return $this->container['old_balance'];
    }

    /**
     * Sets old_balance
     *
     * @param double $old_balance Balance amount before the operation (USD)
     *
     * @return $this
     */
    public function setOldBalance($old_balance)
    {
        $this->container['old_balance'] = $old_balance;

        return $this;
    }

    /**
     * Gets new_balance
     *
     * @return double
     */
    public function getNewBalance()
    {
        return $this->container['new_balance'];
    }

    /**
     * Sets new_balance
     *
     * @param double $new_balance Balance amount after the operation (USD)
     *
     * @return $this
     */
    public function setNewBalance($new_balance)
    {
        $this->container['new_balance'] = $new_balance;

        return $this;
    }

    /**
     * Gets created
     *
     * @return \DateTime
     */
    public function getCreated()
    {
        return $this->container['created'];
    }

    /**
     * Sets created
     *
     * @param \DateTime $created Operation time
     *
     * @return $this
     */
    public function setCreated($created)
    {
        $this->container['created'] = $created;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}



<?php
/**
 * CampaignSummary
 *
 * PHP version 5
 *
 * @category Class
 * @package  Boostapp
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Boost App Store API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.0
 * Contact: info@boostapp.store
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.13
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Boostapp\Model;

use \ArrayAccess;
use \Boostapp\ObjectSerializer;

/**
 * CampaignSummary Class Doc Comment
 *
 * @category Class
 * @description The model with the campaign summary.
 * @package  Boostapp
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class CampaignSummary implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'CampaignSummary';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'id' => 'int',
        'status' => '\Boostapp\Model\CampaignStatus',
        'country_id' => '\Boostapp\Model\Country',
        'remaining_installs' => 'int',
        'remaining_reviews' => 'int',
        'success_installs' => 'int',
        'success_reviews' => 'int',
        'created' => '\DateTime'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'id' => 'int64',
        'status' => null,
        'country_id' => null,
        'remaining_installs' => 'int64',
        'remaining_reviews' => 'int64',
        'success_installs' => 'int64',
        'success_reviews' => 'int64',
        'created' => 'date-time'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'status' => 'status',
        'country_id' => 'countryId',
        'remaining_installs' => 'remainingInstalls',
        'remaining_reviews' => 'remainingReviews',
        'success_installs' => 'successInstalls',
        'success_reviews' => 'successReviews',
        'created' => 'created'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'status' => 'setStatus',
        'country_id' => 'setCountryId',
        'remaining_installs' => 'setRemainingInstalls',
        'remaining_reviews' => 'setRemainingReviews',
        'success_installs' => 'setSuccessInstalls',
        'success_reviews' => 'setSuccessReviews',
        'created' => 'setCreated'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'status' => 'getStatus',
        'country_id' => 'getCountryId',
        'remaining_installs' => 'getRemainingInstalls',
        'remaining_reviews' => 'getRemainingReviews',
        'success_installs' => 'getSuccessInstalls',
        'success_reviews' => 'getSuccessReviews',
        'created' => 'getCreated'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['status'] = isset($data['status']) ? $data['status'] : null;
        $this->container['country_id'] = isset($data['country_id']) ? $data['country_id'] : null;
        $this->container['remaining_installs'] = isset($data['remaining_installs']) ? $data['remaining_installs'] : null;
        $this->container['remaining_reviews'] = isset($data['remaining_reviews']) ? $data['remaining_reviews'] : null;
        $this->container['success_installs'] = isset($data['success_installs']) ? $data['success_installs'] : null;
        $this->container['success_reviews'] = isset($data['success_reviews']) ? $data['success_reviews'] : null;
        $this->container['created'] = isset($data['created']) ? $data['created'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int $id Campaign ID
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets status
     *
     * @return \Boostapp\Model\CampaignStatus
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param \Boostapp\Model\CampaignStatus $status status
     *
     * @return $this
     */
    public function setStatus($status)
    {
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets country_id
     *
     * @return \Boostapp\Model\Country
     */
    public function getCountryId()
    {
        return $this->container['country_id'];
    }

    /**
     * Sets country_id
     *
     * @param \Boostapp\Model\Country $country_id country_id
     *
     * @return $this
     */
    public function setCountryId($country_id)
    {
        $this->container['country_id'] = $country_id;

        return $this;
    }

    /**
     * Gets remaining_installs
     *
     * @return int
     */
    public function getRemainingInstalls()
    {
        return $this->container['remaining_installs'];
    }

    /**
     * Sets remaining_installs
     *
     * @param int $remaining_installs The number of remaining downloads
     *
     * @return $this
     */
    public function setRemainingInstalls($remaining_installs)
    {
        $this->container['remaining_installs'] = $remaining_installs;

        return $this;
    }

    /**
     * Gets remaining_reviews
     *
     * @return int
     */
    public function getRemainingReviews()
    {
        return $this->container['remaining_reviews'];
    }

    /**
     * Sets remaining_reviews
     *
     * @param int $remaining_reviews The number of remaining reviews
     *
     * @return $this
     */
    public function setRemainingReviews($remaining_reviews)
    {
        $this->container['remaining_reviews'] = $remaining_reviews;

        return $this;
    }

    /**
     * Gets success_installs
     *
     * @return int
     */
    public function getSuccessInstalls()
    {
        return $this->container['success_installs'];
    }

    /**
     * Sets success_installs
     *
     * @param int $success_installs The number of successful downloads
     *
     * @return $this
     */
    public function setSuccessInstalls($success_installs)
    {
        $this->container['success_installs'] = $success_installs;

        return $this;
    }

    /**
     * Gets success_reviews
     *
     * @return int
     */
    public function getSuccessReviews()
    {
        return $this->container['success_reviews'];
    }

    /**
     * Sets success_reviews
     *
     * @param int $success_reviews The number of successful reviews
     *
     * @return $this
     */
    public function setSuccessReviews($success_reviews)
    {
        $this->container['success_reviews'] = $success_reviews;

        return $this;
    }

    /**
     * Gets created
     *
     * @return \DateTime
     */
    public function getCreated()
    {
        return $this->container['created'];
    }

    /**
     * Sets created
     *
     * @param \DateTime $created Created date
     *
     * @return $this
     */
    public function setCreated($created)
    {
        $this->container['created'] = $created;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


